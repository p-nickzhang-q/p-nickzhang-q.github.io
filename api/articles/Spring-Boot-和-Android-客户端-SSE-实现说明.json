{"title":"Spring Boot 和 Android 客户端 SSE 实现说明","uid":"4e5438c9e012a77cb97e209dfb4eefbc","slug":"Spring-Boot-和-Android-客户端-SSE-实现说明","date":"2024-12-09T07:58:01.000Z","updated":"2024-12-09T08:03:22.326Z","comments":true,"path":"api/articles/Spring-Boot-和-Android-客户端-SSE-实现说明.json","keywords":null,"cover":null,"content":"<h1 id=\"Spring-Boot-和-Android-客户端-SSE-实现说明\"><a href=\"#Spring-Boot-和-Android-客户端-SSE-实现说明\" class=\"headerlink\" title=\"Spring Boot 和 Android 客户端 SSE 实现说明\"></a>Spring Boot 和 Android 客户端 SSE 实现说明</h1><p>本项目实现了一个基于 Server-Sent Events (SSE) 的消息推送系统，后端使用 Spring Boot，前端使用 Android 客户端。以下是系统的整体结构和各个部分的详细说明。</p>\n<h2 id=\"1-Spring-Boot-后端实现\"><a href=\"#1-Spring-Boot-后端实现\" class=\"headerlink\" title=\"1. Spring Boot 后端实现\"></a>1. Spring Boot 后端实现</h2><p>后端通过 <code>SseEmitter</code> 来实现 SSE 功能。主要功能是为每个客户端维护一个 <code>SseEmitter</code> 实例，通过 <code>SseEmitter</code> 进行消息推送。</p>\n<h3 id=\"核心代码说明\"><a href=\"#核心代码说明\" class=\"headerlink\" title=\"核心代码说明\"></a>核心代码说明</h3><h4 id=\"1-1-订阅接口\"><a href=\"#1-1-订阅接口\" class=\"headerlink\" title=\"1.1 订阅接口\"></a>1.1 订阅接口</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">val</span> clients = ConcurrentHashMap&lt;String, SseEmitter&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">subscribe</span><span class=\"params\">(clientId: <span class=\"type\">String</span>)</span></span>: SseEmitter &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> emitter = SseEmitter(<span class=\"number\">60</span> * <span class=\"number\">60_000L</span>) <span class=\"comment\">// 1小时超时</span></span><br><span class=\"line\">    clients[clientId] = emitter</span><br><span class=\"line\">    emitter.onCompletion &#123; &#125;</span><br><span class=\"line\">    emitter.onTimeout &#123; clients.remove(clientId) &#125;</span><br><span class=\"line\">    emitter.onError &#123; clients.remove(clientId) &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> emitter</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>clients</code> 是一个 <code>ConcurrentHashMap</code>，用于存储所有在线客户端的 <code>SseEmitter</code> 实例，<code>clientId</code> 作为客户端的标识。</li>\n<li><code>subscribe</code> 方法会为每个客户端创建一个新的 <code>SseEmitter</code> 实例，设置超时时间为 1 小时，并且在事件超时或错误时移除该客户端。</li>\n</ul>\n<h4 id=\"1-2-发送消息接口\"><a href=\"#1-2-发送消息接口\" class=\"headerlink\" title=\"1.2 发送消息接口\"></a>1.2 发送消息接口</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">val</span> RemoveClient = <span class=\"string\">&quot;RemoveClient&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sendEvent</span><span class=\"params\">(clientId: <span class=\"type\">String</span>, message: <span class=\"type\">String</span>)</span></span>: String &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> emitter = clients[clientId]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">if</span> (emitter != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">when</span> (message) &#123;</span><br><span class=\"line\">                RemoveClient -&gt; &#123;</span><br><span class=\"line\">                    clients.remove(clientId)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">else</span> -&gt; &#123;</span><br><span class=\"line\">                    emitter.send(SseEmitter.event().name(<span class=\"string\">&quot;message&quot;</span>).<span class=\"keyword\">data</span>(message))</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"string\">&quot;Message sent&quot;</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e: IOException) &#123;</span><br><span class=\"line\">            clients.remove(clientId)</span><br><span class=\"line\">            <span class=\"string\">&quot;Failed to send message&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;Client not found&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>sendEvent</code> 方法用于向指定客户端发送消息。</li>\n<li>根据不同的消息类型，后端会采取相应的操作，比如移除客户端或推送消息。</li>\n</ul>\n<h2 id=\"2-Android-客户端实现\"><a href=\"#2-Android-客户端实现\" class=\"headerlink\" title=\"2. Android 客户端实现\"></a>2. Android 客户端实现</h2><p>Android 客户端通过 <code>RealEventSource</code> 来接收 SSE 事件，并根据消息内容执行对应的操作。</p>\n<h3 id=\"核心代码说明-1\"><a href=\"#核心代码说明-1\" class=\"headerlink\" title=\"核心代码说明\"></a>核心代码说明</h3><h4 id=\"2-1-客户端连接\"><a href=\"#2-1-客户端连接\" class=\"headerlink\" title=\"2.1 客户端连接\"></a>2.1 客户端连接</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SSEMessage</span>(<span class=\"keyword\">val</span> func: <span class=\"keyword\">suspend</span> () -&gt; <span class=\"built_in\">Unit</span>) &#123;</span><br><span class=\"line\">    Logout(&#123;</span><br><span class=\"line\">        mainVM.logout()</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    RemoveClient(&#123;</span><br><span class=\"line\">        VehicleApi.service.sendEvent(mainVM.user.id!!, RemoveClient.name)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">connect</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> request: Request = Request.Builder()</span><br><span class=\"line\">        .url(<span class=\"string\">&quot;<span class=\"subst\">$&#123;baseUrl&#125;</span>api/v1/em/vehicleauth/subscribe/<span class=\"subst\">$&#123;mainVM.user.id!!&#125;</span>&quot;</span>)</span><br><span class=\"line\">        .header(STORAGE_AUTHORIZATION, SpUtils.token)</span><br><span class=\"line\">        .build()</span><br><span class=\"line\"></span><br><span class=\"line\">    realEventSource = RealEventSource(request, <span class=\"keyword\">object</span> : EventSourceListener() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onEvent</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            eventSource: <span class=\"type\">EventSource</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            id: <span class=\"type\">String</span>?,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            type: <span class=\"type\">String</span>?,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            <span class=\"keyword\">data</span>: <span class=\"type\">String</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        )</span></span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.onEvent(eventSource, id, type, <span class=\"keyword\">data</span>)</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                SSEMessage.valueOf(<span class=\"keyword\">data</span>)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e: Exception) &#123;</span><br><span class=\"line\">                <span class=\"literal\">null</span></span><br><span class=\"line\">            &#125;?.apply &#123;</span><br><span class=\"line\">                activity.lifecycleScope.launch &#123;</span><br><span class=\"line\">                    func()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onClosed</span><span class=\"params\">(eventSource: <span class=\"type\">EventSource</span>)</span></span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.onClosed(eventSource)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onFailure</span><span class=\"params\">(eventSource: <span class=\"type\">EventSource</span>, t: <span class=\"type\">Throwable</span>?, response: <span class=\"type\">Response</span>?)</span></span> \t\t &#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.onFailure(eventSource, t, response)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onOpen</span><span class=\"params\">(eventSource: <span class=\"type\">EventSource</span>, response: <span class=\"type\">Response</span>)</span></span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.onOpen(eventSource, response)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    realEventSource.connect(client)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>connect</code> 方法用于建立与服务器的 SSE 连接。</li>\n<li><code>RealEventSource</code> 是 <code>OkHttp</code> 的一个扩展类，能够处理 SSE 协议。</li>\n<li>在接收到事件时，客户端会根据事件的 <code>data</code> 字段来解析消息类型（如 <code>Logout</code>、<code>RemoveClient</code>），并执行相应的操作。</li>\n</ul>\n<h4 id=\"2-2-事件处理\"><a href=\"#2-2-事件处理\" class=\"headerlink\" title=\"2.2 事件处理\"></a>2.2 事件处理</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SSEMessage</span>(<span class=\"keyword\">val</span> func: <span class=\"keyword\">suspend</span> () -&gt; <span class=\"built_in\">Unit</span>) &#123;</span><br><span class=\"line\">    Logout(&#123;</span><br><span class=\"line\">        mainVM.logout()</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    RemoveClient(&#123;</span><br><span class=\"line\">        VehicleApi.service.sendEvent(mainVM.user.id!!, RemoveClient.name)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>SSEMessage</code> 枚举类定义了两种消息类型：<ul>\n<li><code>Logout</code>: 触发用户登出操作。</li>\n<li><code>RemoveClient</code>: 通知服务器移除客户端。</li>\n</ul>\n</li>\n<li>每个消息类型关联一个挂起函数 (<code>func</code>)，该函数会在接收到事件时执行。</li>\n</ul>\n<h2 id=\"3-使用说明\"><a href=\"#3-使用说明\" class=\"headerlink\" title=\"3. 使用说明\"></a>3. 使用说明</h2><h3 id=\"3-1-后端配置\"><a href=\"#3-1-后端配置\" class=\"headerlink\" title=\"3.1 后端配置\"></a>3.1 后端配置</h3><p>在 Spring Boot 后端中，通过 <code>SseEmitter</code> 实现了 SSE 功能。前端只需要调用 <code>subscribe</code> 方法来订阅特定客户端，然后使用 <code>sendEvent</code> 方法发送消息。</p>\n<h3 id=\"3-2-客户端配置\"><a href=\"#3-2-客户端配置\" class=\"headerlink\" title=\"3.2 客户端配置\"></a>3.2 客户端配置</h3><p>在 Android 客户端中，通过 <code>RealEventSource</code> 类接收来自后端的 SSE 消息，并根据消息类型执行相应的操作（如登出或移除客户端）。客户端连接会在 <code>connect</code> 方法中建立，消息接收后会根据 <code>SSEMessage</code> 枚举类型来触发不同的操作。</p>\n<h2 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h2><p>本实现通过 SSE 协议实现了实时消息推送，结合了 Spring Boot 后端和 Android 客户端。后端使用 <code>SseEmitter</code> 来处理与多个客户端的连接，而客户端使用 <code>RealEventSource</code> 接收并处理事件。通过此方式，前后端实现了实时通信，确保系统能够及时响应客户端的请求。</p>\n<h3 id=\"关键点\"><a href=\"#关键点\" class=\"headerlink\" title=\"关键点\"></a>关键点</h3><ul>\n<li><strong>后端使用 <code>SseEmitter</code></strong> 实现 SSE 消息推送。</li>\n<li><strong>客户端使用 <code>RealEventSource</code></strong> 接收实时事件并处理。</li>\n<li><strong>消息类型通过枚举 <code>SSEMessage</code> 定义</strong>，并结合挂起函数执行不同的操作。</li>\n</ul>\n<p>这样就实现了一个高效、实时的消息推送系统，适用于需要实时通知和更新的场景。</p>\n","feature":true,"text":"Spring Boot 和 Android 客户端 SSE 实现说明本项目实现了一个基于 Server-Sent Events (SSE) 的消息推送系统，后端...","permalink":"/post/Spring-Boot-和-Android-客户端-SSE-实现说明","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[{"name":"Spring Boot","slug":"Spring-Boot","count":1,"path":"api/categories/Spring-Boot.json"},{"name":"SSE","slug":"Spring-Boot/SSE","count":1,"path":"api/categories/Spring-Boot/SSE.json"},{"name":"Android","slug":"Spring-Boot/SSE/Android","count":1,"path":"api/categories/Spring-Boot/SSE/Android.json"}],"tags":[{"name":"Spring Boot","slug":"Spring-Boot","count":1,"path":"api/tags/Spring-Boot.json"},{"name":"SSE","slug":"SSE","count":1,"path":"api/tags/SSE.json"},{"name":"Android","slug":"Android","count":1,"path":"api/tags/Android.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Spring-Boot-%E5%92%8C-Android-%E5%AE%A2%E6%88%B7%E7%AB%AF-SSE-%E5%AE%9E%E7%8E%B0%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">Spring Boot 和 Android 客户端 SSE 实现说明</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-Spring-Boot-%E5%90%8E%E7%AB%AF%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">1. Spring Boot 后端实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%B8%E5%BF%83%E4%BB%A3%E7%A0%81%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">核心代码说明</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-1-%E8%AE%A2%E9%98%85%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">1.1 订阅接口</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">1.2 发送消息接口</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-Android-%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">2. Android 客户端实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%B8%E5%BF%83%E4%BB%A3%E7%A0%81%E8%AF%B4%E6%98%8E-1\"><span class=\"toc-text\">核心代码说明</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">2.1 客户端连接</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86\"><span class=\"toc-text\">2.2 事件处理</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">3. 使用说明</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-%E5%90%8E%E7%AB%AF%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">3.1 后端配置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">3.2 客户端配置</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">4. 总结</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B3%E9%94%AE%E7%82%B9\"><span class=\"toc-text\">关键点</span></a></li></ol></li></ol></li></ol>","author":{"name":"zhangyida","slug":"blog-author","avatar":"https://picx.zhimg.com/v2-4a69a7f62af5158587806ddf5ec780e6_xl.jpg","link":"/","description":"<p>没有过不了的坑,只有吃不完的苦</p>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"文件标签管理器","uid":"41881a9e23e37779fa5f8aab973b895f","slug":"文件标签管理器","date":"2024-11-23T08:06:49.000Z","updated":"2024-12-09T08:01:42.381Z","comments":true,"path":"api/articles/文件标签管理器.json","keywords":null,"cover":"https://raw.githubusercontent.com/PKief/vscode-material-icon-theme/ec559a9f6bfd399b82bb44393651661b08aaf7ba/icons/folder-markdown-open.svg","text":" FILE-TAG-MANAGER-APP ❯ REPLACE-ME 🔗 Table of Contents 📍 Overview 👾 Features 📁 P...","permalink":"/post/文件标签管理器","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[{"name":"工具","slug":"工具","count":1,"path":"api/categories/工具.json"}],"tags":[{"name":"工具","slug":"工具","count":1,"path":"api/tags/工具.json"}],"author":{"name":"zhangyida","slug":"blog-author","avatar":"https://picx.zhimg.com/v2-4a69a7f62af5158587806ddf5ec780e6_xl.jpg","link":"/","description":"<p>没有过不了的坑,只有吃不完的苦</p>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}